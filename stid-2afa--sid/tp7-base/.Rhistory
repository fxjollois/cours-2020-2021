'{ "_id": 0, "name": 1 }')
# Lister les restaurants qui ont le terme “Cafe” dans leur nom
m$find('{ "name": { "$regex": ".*Cafe.*", "$options": "i" }}',
'{ "_id": 0, "name": 1 }')
# Lister les restaurants faisant de la cuisine de type “Pizza” dans “Brooklyn”
df = m$find(
query = '{ "cuisine": "Pizza", "borough": "Brooklyn" }',
fields = '{ "_id": 0, "name": 1, "address.street": 1 }'
)
# Lister les restaurants faisant de la cuisine de type “Pizza” dans “Brooklyn”
m$find(
query = '{ "cuisine": "Pizza", "borough": "Brooklyn" }',
fields = '{ "_id": 0, "name": 1, "address.street": 1 }'
)
# Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$sortByCount": "$name" },
{ "$limit": 10 }
]'
)
# Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$match": { "name": { "$ne": "" }}},
{ "$sortByCount": "$name" },
{ "$limit": 10 }
]'
)
# Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$match": { "name": { "$ne": "" }}},
{ "$sortByCount": "$name" },
{ "$limit": 30 }
]'
)
df = m$find(
query = '{ "name": "Bareburger" }',
fields = '{ "_id": 0, "borough": 1, "address.coord": 1 }'
)
df
df$address$coord
df = m$aggregate(
'[
{ "$match": { "name": "Bareburger" }},
{ "project": {
"borough": 1,
"lng": { "$arrayElemAt": [ "$address.coord", 0 ] },
"lat": { "$arrayElemAt": [ "$address.coord", 1 ] }
}}
]'
)
df = m$aggregate(
'[
{ "$match": { "name": "Bareburger" }},
{ "$project": {
"borough": 1,
"lng": { "$arrayElemAt": [ "$address.coord", 0 ] },
"lat": { "$arrayElemAt": [ "$address.coord", 1 ] }
}}
]'
)
df
df = m$aggregate(
'[
{ "$match": { "name": "Bareburger" }},
{ "$project": {
"_id": 0, "borough": 1,
"lng": { "$arrayElemAt": [ "$address.coord", 0 ] },
"lat": { "$arrayElemAt": [ "$address.coord", 1 ] }
}}
]'
)
df
df = m$find(
query = '{ "name": "Bareburger" }',
fields = '{ "_id": 0, "borough": 1, "address.coord": 1 }'
)
df$coord
df$address$coord
sapply(df$address$coord, function(e) { return(e[1])})
df = m$find(
query = '{ "name": "Bareburger" }',
fields = '{ "_id": 0, "borough": 1, "address.coord": 1 }'
)
df$lng = sapply(df$address$coord, function(e) { return(e[1])})
df$lat = sapply(df$address$coord, function(e) { return(e[2])})
df
# Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(pipeline =
'[
{ "$project": {
"borough": 1,
"eval": { "$arrayElemAt": [ "$grades", 0 ]}
} },
{ "$group": {
"_id": $borough",
"nb_restaurants": { "$sum": 1 },
"score_moyen": { "$avg": "$eval.score" }
} }
]'
)
# Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(pipeline =
'[
{ "$project": {
"borough": 1,
"eval": { "$arrayElemAt": [ "$grades", 0 ]}
} },
{ "$group": {
"_id": "$borough",
"nb_restaurants": { "$sum": 1 },
"score_moyen": { "$avg": "$eval.score" }
} }
]'
)
m = mongo(
collection = "restaurants",
db = "test")
m = mongo(
collection = "restaurants",
db = "test")
m$count()
d = m$find(limit = 5)
d
class(d)
View(d)
View(d[[7]][[1]])
class(d$address)
d$address
class(d$grades)
d$grades
m$count()
m$count(query = '{ "borough": "Brooklyn" }')
m$count(
query = '{
"borough": "Brooklyn",
"cuisine": { "$in": ["French", "Italian"]}
}'
)
m$count(
query = '{
"borough": "Brooklyn",
"cuisine": { "$in": ["French" "Italian"]}
}'
)
m$count(
query = '{
"borough": "Brooklyn"
"cuisine": { "$in": ["French", "Italian"]}
}'
)
m$count(
query = '
"borough": "Brooklyn",
"cuisine": { "$in": ["French", "Italian"]}
}'
)
m$count(
query = '{
"borough": "Brooklyn",
"cuisine": { "$in": "French", "Italian"]}
}'
)
m$distinct(key = "borough")
m$distinct(
key = "cuisine",
query = '{ "borough": "Brooklyn" }'
)
m$find(query = '{ "name": "Shake Shack" }',
fields = '{ "address.street": 1, "borough": 1 }')
m$find(query = '{"borough": "Queens", "grades.score": { "$gte":  50}}',
fields = '{"_id": 0, "name": 1, "grades.score": 1, "address.street": 1}',
limit = 10)
m$find(query = '{"borough": "Queens", "grades.score": { "$gt":  50}}',
fields = '{"_id": 0, "name": 1, "address.street": 1}',
sort = '{"address.street": -1, "name": 1}')
m$aggregate(pipeline = '[
{"$limit": 10 }
]')
m$aggregate(pipeline = '[
{ "$limit": 10 },
{ "$unwind": "$grades" }
]')
m$aggregate(pipeline = '[
{ "$project": { "name": 1, "borough": 1, "nb_grades": { "$size": "$grades" } } },
{ "$sort": { "nb_grades": 1 }},
{ "$limit": 10 }
]')
m$aggregate(pipeline = '[
{ "$limit": 10 },
{ "$project": { "name": 1, "borough": 1, "grade": { "$arrayElemAt": [ "$grades", 0 ]} } }
]')
m$aggregate(pipeline = '[
{ "$limit": 10 },
{ "$addFields": { "quartier": { "$toUpper": { "$substr": [ "$borough", 0, 3 ] } } }},
{ "$project": {
"nom": { "$toUpper": "$name" },
"quartier": { "$cond": { "if": { "$eq": ["$borough", "Bronx"] }, "then": "BRX", "else": "$quartier" } },
"borough": 1
} }
]')
m$aggregate(pipeline = '[
{"$group": {"_id": "Total", "NbRestos": {"$sum": 1}}}
]')
m$aggregate(pipeline = '[
{ "$project": {
"borough": 1, "street": "$address.street",
"eval": { "$arrayElemAt": [ "$grades", 0 ]}
} },
{ "$match": { "eval": { "$exists": true } } },
{ "$match": { "eval.score": { "$gte": 0 } } },
{ "$group": {
"_id": { "quartier": "$borough", "rue": "$street" },
"score": { "$avg": "$eval.score" }
}},
{ "$sort": { "score": 1 }},
{ "$limit": 10 }
]')
m$aggregate(pipeline = '[
{ "$limit": 10 },
{ "$unwind": "$grades" },
{ "$group": {
"_id": "$name",
"avec_addToSet": { "$addToSet": "$grades.grade" },
"avec_push": { "$push": "$grades.grade" }
}}
]')
m$find(
'{ name: "Shake Shack"}',
'{ "address.street": 1, borough: 1 }'
)
m$find(
'{ "name": "Shake Shack"}',
'{ "address.street": 1, borough: 1 }'
)
m$find(
'{ "name": "Shake Shack"}',
'{ "address.street": 1, "borough": 1 }'
)
m$find(
'{ "name": "Shake Shack}',
'{ "address.street": 1, "borough": 1 }'
)
# Lister les informations du restaurant “Cafe Henri”
m$find(query = '{ "name": "Cafe Henri" }')
# Lister les informations du restaurant “Cafe Henri”
m$find(query = '{ "name": "Cafe Henri" }')
rm(d, df)
# 2. Lister tous les restaurants de la chaîne “Bareburger” (rue, quartier)
m$find(
query = '{ "name": "Bareburger" }',
fields = '{ "_id": 0, "address.street": 1, "borough": 1 }'
)
# 3. Lister les restaurants n’ayant pas de quartier connu (“Missing”)
m$find(query = '{ "borough": "Missing" }')
# 4. Lister les restaurants ayant eu un score de 0
m$find(query = '{ "grades.score": 0 }')
# 5. Lister les restaurants ayant eu un score entre 0 et 10 (inclus)
m$find(query =
'{
"grades.score": { "$gte": 0 },
"grades.score": { "$lte": 10 }
}')
# 5. Lister les restaurants ayant eu un score entre 0 et 10 (inclus)
m$find(query =
'{
"grades.score": { "$gte": 0, "$lte": 10 }
}')
# 6. Lister les restaurants qui ont le terme “Cafe” dans leur nom
m$find('{ "name": { "$regex": ".*Cafe.*", "$options": "i" }}',
'{ "_id": 0, "name": 1 }')
# 7. Lister les restaurants faisant de la cuisine de type “Pizza” dans “Brooklyn”
m$find(
'{ "cusine": "Pizza", "borough": "Brooklyn" }',
'{ "_id": 0, "address.street": 1, "name": 1 }'
)
# 7. Lister les restaurants faisant de la cuisine de type “Pizza” dans “Brooklyn”
m$find(
'{ "cuisine": "Pizza", "borough": "Brooklyn" }',
'{ "_id": 0, "address.street": 1, "name": 1 }'
)
# 8. Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$sortByCount": "$name" }
]'
)
# 8. Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$sortByCount": "$name" },
{ "$limit": 10 }
]'
)
# 8. Quelles sont les 10 plus grandes chaines de restaurants (nom identique) ?
m$aggregate(
'[
{ "$match": { "name": { "$ne": "" }}},
{ "$sortByCount": "$name" },
{ "$limit": 10 }
]'
)
# 9. Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(
'[
{ "$project": {
"borough": 1, "eval": { "$arrayElemAt": [ "$grades", 0 ]}
}}
]'
)
# 9. Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(
'[
{ "$project": {
"borough": 1, "eval": { "$arrayElemAt": [ "$grades", 0 ]}
}},
{ "$group": {
"_id": "$borough",
"nb_restaurants": { "$sum": 1 },
"score_moyen": { "$avg": "$eval.score" }
}}
]'
)
# 9. Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(
'[
{ "$project": {
"borough": 1, "eval": { "$arrayElemAt": [ "$grades", 0 ]}
}},
{ "$group": {
"_id": "$borough",
"nb_restaurants": { "$sum": 1 },
"score_moyen": { "$avg": "$eval.score" }
}},
{ "$sort": { "score_moyen": 1 }}
]'
)
# 9. Lister par quartier le nombre de restaurants et le score moyen
m$aggregate(
'[
{ "$match": { "borough": { "$ne": "Missing" }}},
{ "$project": {
"borough": 1, "eval": { "$arrayElemAt": [ "$grades", 0 ]}
}},
{ "$group": {
"_id": "$borough",
"nb_restaurants": { "$sum": 1 },
"score_moyen": { "$avg": "$eval.score" }
}},
{ "$sort": { "score_moyen": 1 }}
]'
)
shiny::runApp('Nextcloud/Année 2020-2021/Rendus/LP Santé - Shiny/SANGLIER')
setwd("~/Documents/GitHub/cours-2020-2021/stid-2afa--sid/tp7-base")
load("http://fxjollois.github.io/donnees/ca/ca.RData")
load(url = "http://fxjollois.github.io/donnees/ca/ca.RData")
?load
load(url("http://fxjollois.github.io/donnees/ca/ca.RData"))
ca_tout
library(dplyr)
library(jsonlite)
library(lubridate)
date("2002-01-15")
date("2002-01-15") + 10
ca_tout %>%
mutate(date = date(paste(annee, mois, 15, sep = "-")))
ca_tout %>%
mutate(date_chr = paste(annee, mois, 15, sep = "-"))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-")))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(data) %>%
summarise(ca = sum(ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date) %>%
summarise(ca = sum(ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date) %>%
summarise(ca = sum(ca)) %>%
toJSON()
library(tidyverse)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date) %>%
summarise(ca = sum(ca)) %>%
write_csv("evol_ca.csv")
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(departement) %>%
summarise(ca = sum(ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(departement) %>%
summarise(ca = sum(ca)) %>%
write_csv("dpt_ca.csv")
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(-date)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(date)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(-date)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(-ca)
?pivot_wider
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(-c(date,ca))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(names_from = departement)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(-ca, names_from = departement)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date) %>%
summarise(ca = sum(ca)) %>%
inner_join(
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement)) %>%
write_csv("evol_ca.csv")
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date) %>%
summarise(ca = sum(ca)) %>%
inner_join(
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement)) %>%
write_csv("evol_ca.csv")
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement))
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement)
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement) %>%
write_csv("evol_ca_dpt.csv")
ca_tout %>%
mutate(date = date(paste(annee, mois_numero, 15, sep = "-"))) %>%
group_by(date, departement) %>%
summarise(ca = sum(ca)) %>%
pivot_wider(values_from = ca, names_from = departement)
ca_tout %>%
group_by(departement, groupe, sous_groupe) %>%
summarise(ca = sum(ca))
ca_tout %>%
group_by(departement, groupe, sous_groupe) %>%
summarise(ca = sum(ca)) %>%
write_csv("dpt_details.csv")
ca_tout %>%
group_by(provenance) %>%
summarise(ca = sum(ca)) %>%
write_csv("prov_ca.csv")
ca_tout %>%
group_by(provenance, departement, annee) %>%
summarise(ca = sum(ca)) %>%
write_csv("prov_details.csv")
